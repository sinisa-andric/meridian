// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: namespace.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NameSpaceService_SayHi_FullMethodName      = "/model.NameSpaceService/SayHi"
	NameSpaceService_Check_FullMethodName      = "/model.NameSpaceService/Check"
	NameSpaceService_Create_FullMethodName     = "/model.NameSpaceService/Create"
	NameSpaceService_Read_FullMethodName       = "/model.NameSpaceService/Read"
	NameSpaceService_Update_FullMethodName     = "/model.NameSpaceService/Update"
	NameSpaceService_Delete_FullMethodName     = "/model.NameSpaceService/Delete"
	NameSpaceService_SoftDelete_FullMethodName = "/model.NameSpaceService/SoftDelete"
	NameSpaceService_Describe_FullMethodName   = "/model.NameSpaceService/Describe"
)

// NameSpaceServiceClient is the client API for NameSpaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameSpaceServiceClient interface {
	SayHi(ctx context.Context, in *NameSpaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error)
	Check(ctx context.Context, in *NameSpaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error)
	Create(ctx context.Context, in *NameSpaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error)
	Read(ctx context.Context, in *NameSpaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error)
	Update(ctx context.Context, in *NameSpaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error)
	Delete(ctx context.Context, in *NameSpaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error)
	SoftDelete(ctx context.Context, in *NameSpaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error)
	Describe(ctx context.Context, in *NameSpaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error)
}

type nameSpaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNameSpaceServiceClient(cc grpc.ClientConnInterface) NameSpaceServiceClient {
	return &nameSpaceServiceClient{cc}
}

func (c *nameSpaceServiceClient) SayHi(ctx context.Context, in *NameSpaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error) {
	out := new(NamespaceResponse)
	err := c.cc.Invoke(ctx, NameSpaceService_SayHi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameSpaceServiceClient) Check(ctx context.Context, in *NameSpaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error) {
	out := new(NamespaceResponse)
	err := c.cc.Invoke(ctx, NameSpaceService_Check_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameSpaceServiceClient) Create(ctx context.Context, in *NameSpaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error) {
	out := new(NamespaceResponse)
	err := c.cc.Invoke(ctx, NameSpaceService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameSpaceServiceClient) Read(ctx context.Context, in *NameSpaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error) {
	out := new(NamespaceResponse)
	err := c.cc.Invoke(ctx, NameSpaceService_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameSpaceServiceClient) Update(ctx context.Context, in *NameSpaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error) {
	out := new(NamespaceResponse)
	err := c.cc.Invoke(ctx, NameSpaceService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameSpaceServiceClient) Delete(ctx context.Context, in *NameSpaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error) {
	out := new(NamespaceResponse)
	err := c.cc.Invoke(ctx, NameSpaceService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameSpaceServiceClient) SoftDelete(ctx context.Context, in *NameSpaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error) {
	out := new(NamespaceResponse)
	err := c.cc.Invoke(ctx, NameSpaceService_SoftDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameSpaceServiceClient) Describe(ctx context.Context, in *NameSpaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error) {
	out := new(NamespaceResponse)
	err := c.cc.Invoke(ctx, NameSpaceService_Describe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameSpaceServiceServer is the server API for NameSpaceService service.
// All implementations must embed UnimplementedNameSpaceServiceServer
// for forward compatibility
type NameSpaceServiceServer interface {
	SayHi(context.Context, *NameSpaceRequest) (*NamespaceResponse, error)
	Check(context.Context, *NameSpaceRequest) (*NamespaceResponse, error)
	Create(context.Context, *NameSpaceRequest) (*NamespaceResponse, error)
	Read(context.Context, *NameSpaceRequest) (*NamespaceResponse, error)
	Update(context.Context, *NameSpaceRequest) (*NamespaceResponse, error)
	Delete(context.Context, *NameSpaceRequest) (*NamespaceResponse, error)
	SoftDelete(context.Context, *NameSpaceRequest) (*NamespaceResponse, error)
	Describe(context.Context, *NameSpaceRequest) (*NamespaceResponse, error)
	mustEmbedUnimplementedNameSpaceServiceServer()
}

// UnimplementedNameSpaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNameSpaceServiceServer struct {
}

func (UnimplementedNameSpaceServiceServer) SayHi(context.Context, *NameSpaceRequest) (*NamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHi not implemented")
}
func (UnimplementedNameSpaceServiceServer) Check(context.Context, *NameSpaceRequest) (*NamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedNameSpaceServiceServer) Create(context.Context, *NameSpaceRequest) (*NamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNameSpaceServiceServer) Read(context.Context, *NameSpaceRequest) (*NamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedNameSpaceServiceServer) Update(context.Context, *NameSpaceRequest) (*NamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNameSpaceServiceServer) Delete(context.Context, *NameSpaceRequest) (*NamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNameSpaceServiceServer) SoftDelete(context.Context, *NameSpaceRequest) (*NamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftDelete not implemented")
}
func (UnimplementedNameSpaceServiceServer) Describe(context.Context, *NameSpaceRequest) (*NamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (UnimplementedNameSpaceServiceServer) mustEmbedUnimplementedNameSpaceServiceServer() {}

// UnsafeNameSpaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameSpaceServiceServer will
// result in compilation errors.
type UnsafeNameSpaceServiceServer interface {
	mustEmbedUnimplementedNameSpaceServiceServer()
}

func RegisterNameSpaceServiceServer(s grpc.ServiceRegistrar, srv NameSpaceServiceServer) {
	s.RegisterService(&NameSpaceService_ServiceDesc, srv)
}

func _NameSpaceService_SayHi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameSpaceServiceServer).SayHi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameSpaceService_SayHi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameSpaceServiceServer).SayHi(ctx, req.(*NameSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameSpaceService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameSpaceServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameSpaceService_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameSpaceServiceServer).Check(ctx, req.(*NameSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameSpaceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameSpaceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameSpaceService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameSpaceServiceServer).Create(ctx, req.(*NameSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameSpaceService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameSpaceServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameSpaceService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameSpaceServiceServer).Read(ctx, req.(*NameSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameSpaceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameSpaceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameSpaceService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameSpaceServiceServer).Update(ctx, req.(*NameSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameSpaceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameSpaceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameSpaceService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameSpaceServiceServer).Delete(ctx, req.(*NameSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameSpaceService_SoftDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameSpaceServiceServer).SoftDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameSpaceService_SoftDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameSpaceServiceServer).SoftDelete(ctx, req.(*NameSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameSpaceService_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameSpaceServiceServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameSpaceService_Describe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameSpaceServiceServer).Describe(ctx, req.(*NameSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NameSpaceService_ServiceDesc is the grpc.ServiceDesc for NameSpaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameSpaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.NameSpaceService",
	HandlerType: (*NameSpaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHi",
			Handler:    _NameSpaceService_SayHi_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _NameSpaceService_Check_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _NameSpaceService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _NameSpaceService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NameSpaceService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NameSpaceService_Delete_Handler,
		},
		{
			MethodName: "SoftDelete",
			Handler:    _NameSpaceService_SoftDelete_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _NameSpaceService_Describe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "namespace.proto",
}
